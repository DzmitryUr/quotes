{"version":3,"sources":["quotes.js","App.js","serviceWorker.js","index.js"],"names":["quotes","author","quote","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","index","Math","floor","random","state","handleClick","bind","assertThisInitialized","setState","react_default","a","createElement","id","className","href","Button","bsStyle","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RAuCiBA,EAvCF,CACX,CACEC,OAAQ,eACRC,MAAO,oFAET,CACED,OAAQ,cACRC,MAAO,wDAET,CACED,OAAQ,mBACRC,MAAO,uFAET,CACED,OAAQ,mBACRC,MAAO,mFAET,CACED,OAAQ,mBACRC,MAAO,4FAET,CACED,OAAQ,mBACRC,MAAO,gEAET,CACGD,OAAQ,iBACRC,MAAO,sIAEV,CACGD,OAAQ,YACRC,MAAO,+CAEV,CACGD,OAAQ,eACRC,MAAO,iDCgBCC,cA7Cb,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,IACN,IAAIQ,EAAOC,KAAKC,MAAsB,EAAhBD,KAAKE,UAFV,OAGjBV,EAAKW,MAAQ,CACVd,MAAOF,EAAOY,GAAOV,MACrBD,OAAQD,EAAOY,GAAOX,QAEzBI,EAAKY,YAAcZ,EAAKY,YAAYC,KAAjBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KAPFA,6EAWjBG,KAAKI,MAAQC,KAAKC,MAAsB,EAAhBD,KAAKE,UAC7BP,KAAKY,SAAS,CACZlB,MAAOF,EAAOQ,KAAKI,OAAOV,MAC1BD,OAAQD,EAAOQ,KAAKI,OAAOX,0CAK7B,OACEoB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACRH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,GAAG,OAAOC,UAAU,YACvBJ,EAAAC,EAAAC,cAAA,UAAKf,KAAKQ,MAAMd,QAElBmB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,SAASC,UAAU,uBAA3B,KACIJ,EAAAC,EAAAC,cAAA,SAAIf,KAAKQ,MAAMf,UAGrBoB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBACbJ,EAAAC,EAAAC,cAAA,KAAGG,KAAK,kCAAkCF,GAAG,eAA7C,SAEFH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,uBACbJ,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAQC,QAAQ,UAAUJ,GAAG,YAAYK,QAASrB,KAAKS,aAAvD,uBApCQa,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.44f8f391.chunk.js","sourcesContent":["const quotes = [\n    {\n      author: 'Walt Whitman',\n      quote: 'Keep your face always toward the sunshine—and shadows will fall behind you.'\n    },\n    {\n      author: 'Amelia Barr',\n      quote: 'It is always the simple that produces the marvelous.'\n    },\n    {\n      author: 'Bertrand Russell',\n      quote: 'The world is full of magical things patiently waiting for our wits to grow sharper.'\n    },\n    {\n      author: 'Malala Yousafzai',\n      quote: 'Let us make our future now, and let us make our dreams tomorrow’s reality.'\n    },\n    {\n      author: 'Earl Nightingale',\n      quote: 'All you need is the plan, the road map, and the courage to press on to your destination.'\n    },\n    {\n      author: 'Thomas Jefferson',\n      quote: 'The glow of one warm thought is to me worth more than money.'\n    },\n    {\n       author: 'E. E. Cummings',\n       quote: 'Once we believe in ourselves, we can risk curiosity, wonder, spontaneous delight, or any experience that reveals the human spirit.'\n    },\n    {\n       author: 'John Muir',\n       quote: 'The power of imagination makes us infinite.'\n    },\n    {\n       author: 'Maya Angelou',\n       quote: 'Try to be a rainbow in someone’s cloud.'\n    },    \n  ]\n\n  export default quotes;","import React, { Component } from 'react';\nimport './App.css';\nimport { Button } from 'react-bootstrap';\nimport quotes from './quotes.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);   \n    let index =Math.floor(Math.random() * 9); \n    this.state = {       \n       quote: quotes[index].quote,\n       author: quotes[index].author,\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {    \n    this.index = Math.floor(Math.random() * 9);    \n    this.setState({\n      quote: quotes[this.index].quote,\n      author: quotes[this.index].author\n    });\n  }\n\n  render() {\n    return (\n      <div id=\"quote-box\">\n      <div>\n        <div id=\"text\" className=\"margin-5\">\n          <h2>{this.state.quote}</h2>\n        </div>          \n        <div id=\"author\" className=\"pull-right margin-5\">\n          - <i>{this.state.author}</i>\n        </div>\n      </div>\n      <br/>\n      <div>  \n        <div className=\"pull-left margin-5\">\n          <a href=\"http://twitter.com/intent/tweet\" id=\"tweet-quote\">Twit</a>\n        </div>\n        <div className=\"pull-right margin-5\">\n          <Button bsStyle=\"success\" id=\"new-quote\" onClick={this.handleClick}>\n            New Quote\n          </Button>\n        </div>  \n      </div>  \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}